#cloud-config
# See examples: https://github.com/canonical/cloud-init/tree/main/doc/examples

# Hostname is automatically replaced with virt-cloud-init.sh script upon execution
hostname: ${hostname}
locale: en_US.UTF-8

# Disable ssh access as root.
disable_root: true

# If you want to allow SSH with password, set this to true
ssh_pwauth: false

# users[0] (the first user in users) overrides the user directive.
users:
  - name: ${user}
    gecos: Kubernetes Clustorious Node
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: users, adm
    shell: /bin/fish
    lock_passwd: false
    # Generate with:
    # $ mkpasswd --method=SHA-512 --rounds=4096
    hashed_passwd: |
      $6$rounds=4096$NPd89fonz.O5yZ8D$hAE6oVYS6Li/ZvY9.89AN4oN.Uwc4CmkAFw9cVmEhNaBFwVnwffTF5uc13kPF1qUQzLrRyxgMJ.XkYvjfV7250
    # Or use plaintext
    # plain_text_passwd: master
    ssh_authorized_keys:
      - "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCgyiRBh2ii5UXec3syW1oGOQjNFFBDVOtszG7V5R4noVmYppiYWIcWpd2H+J779BrjtupEW261hp4SR2JRCfuUhY9pJ8bk6CEbNlfPamyDAbgQawA8WfAyTctw84jt5oAbCKQWN0voHG0pZ+VUQUh2OhmPc/xtWVH017UURMA+4Wb46GxC0KAbYadR08FST7/Hrk7ahpkIRVx+5KLxzxLmKeS82jFXKMkmHUt6ZhaO/DlHuA4OkuqxWSdrOhU9wsp3l4vt2ynDsm9+m8gC5UpSeSyILzsf95NBCVN3HinVP/ItSKdW96Aj2g8l1arYgxWpb28S7z3JDEvF5k6vbygR3rbKlL5Ie3K9h5EWk4gSon95Q95v4n/DOgalkFhnXyuMpb8leIHxvphYtBfprH012QrrRom3JKQCeoTpdjjhJ8IaV32Ty+AWxne9YpnzW06u1GuWAIuNHbZeUiAiAOdcMrfxKCjblww8+aHCY8jMaoVQRiyUOkE/yjFXQVXdRU0= iac master key"

# List of packages to install after the VM comes up
package_upgrade: true
package_reboot_if_required: true
package_update: true
packages:
  # KVM quest agent
  - qemu-guest-agent
  # Apt repo misc
  - software-properties-common
  - apt-transport-https
  - ca-certificates
  - gnupg
  # Tools
  - curl
  - wget
  - htop
  - git
  - vim
  - net-tools
  # - tmux
  # Linux rice
  - screenfetch
  - fzf
  - exa
  - bat
  - upx
  - jq
  
runcmd:
  # SETTINGS
  # Disable swap
  - swapoff -a
  # Enable ssh
  - systemctl enable ssh
  - systemctl start ssh
  # Enable kernel modules
  - modprobe overlay -v
  - modprobe br_netfilter -v
  - echo "overlay" >> /etc/modules
  - echo "br_netfilter" >> /etc/modules
  # Setup ipv forward, etc
  - echo 1 > /proc/sys/net/ipv4/ip_forward
  # KUBELET
  # Installation without package manager
  # See: https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#installing-kubeadm-kubelet-and-kubectl
  # Install CNI plugins (required for most pod network)
  - mkdir -p /opt/cni/bin
  - curl -L "https://github.com/containernetworking/plugins/releases/download/${cni_plugins_v}/cni-plugins-linux-${arch}-${cni_plugins_v}.tgz" | tar -C /opt/cni/bin -xz
  # Install crictl (required for kubeadm / Kubelet Container Runtime Interface (CRI))
  - mkdir -p "${download_dir}"
  - curl -L "https://github.com/kubernetes-sigs/cri-tools/releases/download/${crictl_v}/crictl-${crictl_v}-linux-${arch}.tar.gz" | tar -C ${download_dir} -xz
  # Install kubeadm, kubelet, kubectl and add a kubelet systemd service
  - export RELEASE="$(curl -sSL https://dl.k8s.io/release/stable.txt)"
  - cd ${download_dir}
  - curl -L --remote-name-all https://dl.k8s.io/release/$RELEASE/bin/linux/${arch}/{kubeadm,kubelet}
  - curl -sSL "https://raw.githubusercontent.com/kubernetes/release/${kubelet_service_v}/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service" | sed "s:/usr/bin:${download_dir}:g" | tee /etc/systemd/system/kubelet.service
  - mkdir -p /etc/systemd/system/kubelet.service.d
  - curl -sSL "https://raw.githubusercontent.com/kubernetes/release/${kubelet_service_v}/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf" | sed "s:/usr/bin:${download_dir}:g" | tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
  # Enable and start kubelet
  - apt-get install -y conntrack
  - systemctl enable --now kubelet
  # CRI-O CONTAINER RUNITME
  # See: https://cri-o.io/
  # Install cri-o container runtime
  - echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${crio_os}/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
  - echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/${crio_v}/${crio_os}/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:${crio_v}.list
  - curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/${crio_v}/${crio_os}/Release.key | apt-key add -
  - curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${crio_os}/Release.key | apt-key add -
  - apt-get update
  - apt-get install -y cri-o cri-o-runc
  # Enable and start crio runtime on boot
  - systemctl enable --now crio
  - systemctl start crio
  # Make all binaries executable
  - chmod +x /usr/local/bin/*
  # Compress binaries to save space
  - upx --best --lzma /usr/local/bin/*
  # LINUX RICE
  # Add latest Fish repo
  - echo 'deb http://download.opensuse.org/repositories/shells:/fish:/release:/3/Debian_11/ /' | tee /etc/apt/sources.list.d/shells:fish:release:3.list
  - curl -fsSL https://download.opensuse.org/repositories/shells:fish:release:3/Debian_11/Release.key | gpg --dearmor | tee /etc/apt/trusted.gpg.d/shells_fish_release_3.gpg > /dev/null
  - apt update
  - apt install -y fish
  ## Install starship
  - export FORCE=1
  - curl -sS https://starship.rs/install.sh | sh
  # Install mcfly for command history
  - curl -LSfs https://raw.githubusercontent.com/cantino/mcfly/master/ci/install.sh | sh -s -- --git cantino/mcfly
  # Link batcat to cat
  - ln -s /usr/bin/batcat /usr/local/bin/bat
  # Dotfiles
  - git clone --recurse-submodules -j8 https://github.com/mbrav/dotfiles /tmp/dotfiles
  - git --git-dir=/tmp/dotfiles/.git checkout ${dotfiles_v}
  - cp -vr /tmp/dotfiles/dotfiles/.config /home/${user}/
  - cp -v /tmp/dotfiles/dotfiles/.vimrc /home/${user}/
  # Vim plugins
  # - cp -v /tmp/dotfiles/dotfiles/.vimrc.plug /home/${user}/
  - cp -v /tmp/dotfiles/dotfiles/.bashrc /home/${user}/
  - chown -R ${user}:${user} /home/${user}
  # Dotfiles conf
  - sed -i "s/'nord-blue'/'${starship_theme}'/g" /home/${user}/.config/starship.toml

# Expand partition
growpart:
  mode: auto
  devices: ["/"]

# Written to /var/log/cloud-init-output.log
final_message: "The system is finally up, after $UPTIME seconds"
